library(reticulate)
library(tidyverse)
library(udpipe)
library(ggwordcloud)
library(rvest)
library(xml2)
library(tidytext)
library(SnowballC)
library(quanteda)
library(text2vec)
library(LDAvis)
# create a much simpler function for getting a series of date ranges using the built-in seq.Date function:
dRangeSeq<-function(start_date, end_date, by=1){
start_date<-as.Date(start_date)
end_date<-as.Date(end_date)
sdates<-seq.Date(start_date, end_date, by=by)
result<-data.frame("start_date" = sdates[-length(sdates)],
"end_date" = sdates[2:length(sdates)])
return(result)
}
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
reticulate::py_last_error()
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc, import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from GdeltDoc import GdeltDoc, Filters')
# create a much simpler function for getting a series of date ranges using the built-in seq.Date function:
dRangeSeq<-function(start_date, end_date, by=1){
start_date<-as.Date(start_date)
end_date<-as.Date(end_date)
sdates<-seq.Date(start_date, end_date, by=by)
result<-data.frame("start_date" = sdates[-length(sdates)],
"end_date" = sdates[2:length(sdates)])
return(result)
}
# creating a data frame with start and end dates and getting one day at a time
date_ranges<-dRangeSeq("2022-02-24", "2022-04-24", by=1)
# add a column to track number of articles returned per period
date_ranges$number_returned<-NA
# add a column to track errors
date_ranges$errors<-""
# create an empty vector to count our results:
articles_count <- c()
# create an empty list to contain the actual articles
articles_frame<-data.frame()
i<-1
# for every number from 1 to the number of rows the date_ranges frame, do whatever is in the curly brackets:
for(i in i:nrow(date_ranges)){
f = py$Filters(
# as.character() converts the date to text so python can handle it:
start_date = as.character(date_ranges$start_date[i]),
end_date = as.character(date_ranges$end_date[i]),
#end_date = 'sfadf',
keyword= c('ukraine', 'russia', 'invasion'),
country = 'US',
domain_exact = "apnews.com"
)
gd = py$GdeltDoc()
print(i)
# Search for articles matching the filters
start_time<-Sys.time()
# tryCatch for error handling
result <- tryCatch({
# retrieve articles
articles = gd$article_search(f)
# add count to the date ranges frame
date_ranges$number_returned[i]<-nrow(articles)
# add articles to total
articles_frame<-bind_rows(articles_frame, articles)%>%
distinct()
# print results
print(sprintf("%s articles retrieved", nrow(articles)))
}, error = function(e) {
# if there is an error, log it
date_ranges$errors[i] <- paste(e)
# and also print a warning
print(sprintf('an error occurred for on iteration %s', i))
}
)
end_time<-Sys.time()
# this isn't required, it just lets us know that the loop is running:
# pauses the system afte reach iteration - slows it down further if the API slows down
Sys.sleep((end_time - start_time) +1)
}
library(reticulate)
library(tidyverse)
library(udpipe)
library(ggwordcloud)
library(rvest)
library(xml2)
library(tidytext)
library(SnowballC)
library(quanteda)
library(text2vec)
library(LDAvis)
# create a much simpler function for getting a series of date ranges using the built-in seq.Date function:
dRangeSeq<-function(start_date, end_date, by=1){
start_date<-as.Date(start_date)
end_date<-as.Date(end_date)
sdates<-seq.Date(start_date, end_date, by=by)
result<-data.frame("start_date" = sdates[-length(sdates)],
"end_date" = sdates[2:length(sdates)])
return(result)
}
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
library(reticulate)
library(tidyverse)
library(udpipe)
library(ggwordcloud)
library(rvest)
library(xml2)
library(tidytext)
library(SnowballC)
library(quanteda)
library(text2vec)
library(LDAvis)
# create a much simpler function for getting a series of date ranges using the built-in seq.Date function:
dRangeSeq<-function(start_date, end_date, by=1){
start_date<-as.Date(start_date)
end_date<-as.Date(end_date)
sdates<-seq.Date(start_date, end_date, by=by)
result<-data.frame("start_date" = sdates[-length(sdates)],
"end_date" = sdates[2:length(sdates)])
return(result)
}
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('py --version')
from gdeltdoc import GdeltDoc, Filters
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from GdeltDoc import GdeltDoc, Filters')
# import the Filters and GdeltDoc functions from the gdeltdoc python package
py_run_string('from gdeltdoc import GdeltDoc, Filters')
